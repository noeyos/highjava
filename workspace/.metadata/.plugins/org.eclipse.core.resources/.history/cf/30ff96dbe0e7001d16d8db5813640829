package kr.or.ddit.basic;

import java.util.Random;


public class RaceHorse {
	
	public static void main(String[] args) {
		RCHorse[] horseArr = new RCHorse[] {
				new RCHorse("01번말"), new RCHorse("02번말"), new RCHorse("03번말"), new RCHorse("04번말"),
				new RCHorse("05번말"), new RCHorse("06번말"), new RCHorse("07번말"), new RCHorse("08번말"),
				new RCHorse("9번말"), new RCHorse("10번말")	
		};
		
		GameStatePrint gsp = new GameStatePrint(horseArr);
		
		// 말들의 경주 시작
		for(RCHorse h : horseArr) {
			h.start();
		}
		
		// 말들의 경주 상태 출력 스레드 시작
		gsp.start();
		
		for(RCHorse h : horseArr) {
			try {
				h.join();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
			}
		}
		
		try {
			gsp.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
		}
		
		System.out.println();
		System.out.println("경기 끝");
		
		System.out.println("경기 결과");
		
		for(RCHorse h : horseArr) {
			System.out.println(h);
		}
		
	}

}



/*
 
	10마리의 말들이 경주하는 경마 프로그램 작성하기

	말은 Horse라는 이름의 쓰레드 클래스로 구성하고,
	이 클래스는 말이름(String), 현재위치(int), 등수(int)를 멤버변수로 갖는다.
	그리고, 이 클래스에는 등수를 오름차순으로 처리할 수 있는 내부 정렬 기준이 있다.
	( Comparable 인터페이스 구현 )

	경기 구간은 1~50구간으로 되어 있다.

 */

class RCHorse extends Thread implements Comparable<Horse> {
	public static int currentRank = 0;	// 말들의 등수를 결정할 변수
	
	private String horseName;	// 말 이름
	private int location;		// 현재 위치
	private int rank;			// 등수
	
	// 생성자
	public RCHorse(String horseName) {
		super();
		this.horseName = horseName;
	}
	
	// getter setter
	public String getHorseName() {
		return horseName;
	}

	public void setHorseName(String horseName) {
		this.horseName = horseName;
	}

	public int getLocation() {
		return location;
	}

	public void setLocation(int location) {
		this.location = location;
	}

	public int getRank() {
		return rank;
	}

	public void setRank(int rank) {
		this.rank = rank;
	}

	@Override
	public String toString() {
		return "경주마 " + horseName + "의 등수는 " + rank + "등 입니다.";
	}
	
	// 등수의 오름차순으로 처리할 내부 정렬 기준
	@Override
	public int compareTo(Horse horse) {
		return Integer.compare(rank, horse.rank);
	}
	
	// 말이 달리는 것을 스레드로 처리
	@Override
	public void run() {
		Random rnd = new Random();
		
		for(int i=1; i<=50; i++) {	// 구간
			this.location = i;		// 말의 현재 위치를 구한다.
			
			try {
				Thread.sleep(rnd.nextInt(i));
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
			}
		} // for문 끝.
		
		// 한 마리의 말이 경주가 끝나면 등수를 구해서 저장한다.
		currentRank++;
		this.rank = currentRank;
		
	}

}



/*
	경기 중 중간 중간에 각 말들의 위치를 나타내시오.
	
	예)
	1번말 --->------------------------------------
	2번말 ----->----------------------------------
	...

*/

// 경기 중에 말의 현재 위치를 나타내는 스레드
class GameStatePrint extends Thread {
	private RCHorse[] horseArr;
	
	// 생성자
	public GameStatePrint(RCHorse[] horseArr) {
		this.horseArr = horseArr;
	}
	
	@Override
	public void run() {
		while(true) {
			// 모든 말들의 경기가 종료되었는지 여부 검사
			if(RCHorse.currentRank == horseArr.length) {
				break;
			}
			
			for(int i=0; i<horseArr.length; i++) {
				System.out.print(horseArr[i].getHorseName() + " : ");
			
				for(int j=1; j<=50; j++) {
					// 말의 현재 위치를 찾아서 '>' 문자로 나타냄
					if(horseArr[i].getLocation() == j) {
						System.out.println(">");
					} else {
						System.out.println("-");
					}
					
				}
				System.out.println();	// 줄바꿈
				
			}
			
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
			}
			
		}
	
	}
	
}